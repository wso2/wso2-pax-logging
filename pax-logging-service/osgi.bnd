#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

Bundle-Activator: org.ops4j.pax.logging.service.internal.Activator
Bundle-SymbolicName:org.ops4j.pax.logging.pax-logging-service


# See https://bnd.bndtools.org/heads/private_package.html
#
# The problem is that with log4j we have (among others):
#  - org.apache.log4j.Logger class has to be exported from pax-logging-api (with pax-logging changes)
#  - org.apache.log4j.Logger class also has to be private in pax-logging-service (for actual log4j functionality)
#  - ideally, pax-logging-service should use private-packaged classes and (if not found), import them from pax-logging-api
#    but that's not possible with OSGi classloading
#  - there are cases (org.apache.log4j.Category class) where a class has to be exported with changes from pax-logging-api
#    and private-packaged with changes in pax-logging-service while at the same time, other classes in given package
#    have to be taken directly from log4j:log4j bundle.
#
# We can't (don't want to) rely on order of bundles calculated by `org.apache.felix.bundleplugin.BundlePlugin.getClasspath()`
# But we can assume that `org.apache.maven.model.Build.getOutputDirectory()` will always be the first candidate to check
# in cases where given package is available in many dependencies.
# That's why even if some log4j:log4j packages are exported by pax-logging-api, we have to use pax-logging-service
# private versions of those packages. Careful POM configuration ensures that we take those classes from
# precisely selected bundle (pax-logging-api, log4j:log4j or log4j:apache-log4j-extras)
#
# -split-package:=first is used where we explicitly want to include ONLY the classes unpacked by
#    maven-resources-plugin:copy-resources - important for classes that we want to Private-Package from pax-logging-api
#    which uses changed versions (comparing to log4j:log4j which is also a Maven dependency of pax-logging-service)
#    we just know that the first location is "target/classes" into which we unpack what we really want
# -split-package:=merge-first is used when we don't care from which dependency (e.g., log4j or apache-log4j-extras)
#    given class comes

Private-Package: \
 org.apache.log4j; -split-package:=first, \
 org.apache.log4j.chainsaw; -split-package:=merge-first, \
 org.apache.log4j.component; -split-package:=merge-first, \
 org.apache.log4j.component.helpers; -split-package:=merge-first, \
 org.apache.log4j.component.plugins; -split-package:=merge-first, \
 org.apache.log4j.component.scheduler; -split-package:=merge-first, \
 org.apache.log4j.component.spi; -split-package:=merge-first, \
 org.apache.log4j.config; -split-package:=merge-first, \
 org.apache.log4j.extras; -split-package:=merge-first, \
 org.apache.log4j.filter; -split-package:=merge-first, \
 org.apache.log4j.helpers; -split-package:=first, \
 org.apache.log4j.jdbc; -split-package:=merge-first, \
 org.apache.log4j.jmx; -split-package:=merge-first, \
 org.apache.log4j.lf5; -split-package:=merge-first, \
 org.apache.log4j.lf5.util; -split-package:=merge-first, \
 org.apache.log4j.lf5.viewer; -split-package:=merge-first, \
 org.apache.log4j.lf5.viewer.categoryexplorer; -split-package:=merge-first, \
 org.apache.log4j.lf5.viewer.configure; -split-package:=merge-first, \
 org.apache.log4j.net; -split-package:=merge-first, \
 org.apache.log4j.nt; -split-package:=merge-first, \
 org.apache.log4j.or.jms; -split-package:=merge-first, \
 org.apache.log4j.or.sax; -split-package:=merge-first, \
 org.apache.log4j.receivers.db; -split-package:=merge-first, \
 org.apache.log4j.receivers.db.dialect; -split-package:=merge-first, \
 org.apache.log4j.receivers.helpers; -split-package:=merge-first, \
 org.apache.log4j.receivers.net; -split-package:=merge-first, \
 org.apache.log4j.receivers.rewrite; -split-package:=merge-first, \
 org.apache.log4j.receivers.spi; -split-package:=merge-first, \
 org.apache.log4j.receivers.varia; -split-package:=merge-first, \
 org.apache.log4j.receivers.xml; -split-package:=merge-first, \
 org.apache.log4j.rewrite; -split-package:=merge-first, \
 org.apache.log4j.rolling; -split-package:=merge-first, \
 org.apache.log4j.rolling.helper; -split-package:=merge-first, \
 org.apache.log4j.rule; -split-package:=merge-first, \
 org.apache.log4j.sift, \
 org.apache.log4j.spi; -split-package:=merge-first, \
 org.apache.log4j.varia; -split-package:=merge-first, \
 META-INF.maven.log4j*, \
 org.ops4j.pax.logging.service.internal, \
 org.ops4j.pax.logging.service.internal.bridges, \
 org.ops4j.pax.logging.service.internal.spi, \
 org.ops4j.pax.logging.spi.support

Export-Package: \
 !*

Import-Package: \
 javax.xml.*, \
 (com|sun|javax).*;resolution:=optional, \
 org.knopflerfish.service.log; provider="paxlogging"; version="[1.1.0,2.0.0)", \
 org.ops4j.pax.logging; version="[1.11,2.0)", \
 org.ops4j.pax.logging.spi; version="[1.11,2.0)", \
 org.osgi.framework; version="[1.0.0,2.0.0)", \
 org.osgi.service.cm; version="[1.0.0,2.0.0)"; resolution:=optional, \
 org.osgi.service.event; version="[1.0.0,2.0.0)"; resolution:=optional, \
 org.osgi.service.log; version="[1.3.0,2.0.0)", \
 org.osgi.util.tracker; version="[1.3.0,2.0.0)", \
 org.apache.log4j.or; version=${version.log4j}; provider=paxlogging, \
 org.apache.log4j.pattern; version=${version.log4j}; provider=paxlogging, \
 org.apache.log4j.xml; version=${version.log4j}; provider=paxlogging, \
 *

Provide-Capability: \
 osgi.service;effective:=active;objectClass=org.osgi.service.log.LogService,\
 osgi.service;effective:=active;objectClass=org.knopflerfish.service.log.LogService,\
 osgi.service;effective:=active;objectClass=org.ops4j.pax.logging.PaxLoggingService,\
 osgi.service;effective:=active;objectClass=org.osgi.service.cm.ManagedService
